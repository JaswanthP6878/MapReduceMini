package internal

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"unicode"
)

type KeyValue struct {
	Key   string
	Value string
}

// Divide the input file directory based worker count
func splitInputDir(path string, worker_count int) map[int][]string {
	files, err := os.ReadDir(path)
	if err != nil {
		fmt.Println("Error reading dir", err)
	}

	workerFiles := map[int][]string{}
	for i := range files {
		if _, exists := workerFiles[(i%worker_count)+1]; !exists {
			workerFiles[(i%worker_count)+1] = []string{}
		}
		workerFiles[(i%worker_count)+1] = append(workerFiles[(i%worker_count)+1], fmt.Sprintf("%s/%s", path, files[i].Name()))
	}
	return workerFiles

}

// util functions:
// The Map and reduce functions are here
// assume we are passing them as plugins
func Map(filename string, contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
